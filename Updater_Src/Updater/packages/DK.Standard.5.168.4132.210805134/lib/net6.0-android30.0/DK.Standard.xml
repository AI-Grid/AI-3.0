<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DK.Standard</name>
    </assembly>
    <members>
        <member name="T:DK.Logging.LogWithOptionalParameterList">
            <summary>
            The purpose of this type is to act as a guard between
            the actual parameter list and optional parameter list.
            If you need to pass this type as an argument you are using
            the wrong overload.
            </summary>
        </member>
        <member name="M:DK.Standard.Attributes.DefaultAttribute.#ctor(System.Boolean,System.Object)">
            <summary>
                Used to set default value in database
            </summary>
            <param name="usePropertyValue">
                Will set default value to same as property. You would use proprty with backing field to
                set this
            </param>
            <param name="value">The value to set as default if usePropertyValue is false</param>
        </member>
        <member name="T:DK.Standard.CopyOnWriteDictionary`2">
            <summary>
            Thread-safe append-only dictionary with internal copy-on-write behavior that enables the fastest possible lock-free lookups.
            </summary>
            <remarks>
            <para>
            The performance characteristics of this dictionary make it perfect for use as a permanent object cache. Updates to the dictionary are temporarily
            cached in a synchronized mutable collection which allows copying to be delayed so that updates are batched together to reduce copying and improve write
            performance. This dictionary has identical lookup performance to <see cref="T:System.Collections.Generic.Dictionary`2"/> for values that have been copied into the main
            lookup.
            </para>
            <para>
            Delayed updates are stored in a temporary synchronized mutable lookup. Once there have been no updates to the dictionary for the amount of time set on
            <see cref="P:DK.Standard.CopyOnWriteDictionary`2.CopyDelay"/> then the internal copy operation is performed on a background thread and lookups are restored to full speed.
            </para>
            </remarks>
        </member>
        <member name="P:DK.Standard.CopyOnWriteDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="P:DK.Standard.CopyOnWriteDictionary`2.Keys">
            <summary>
            Gets the keys contained in this dictionary.
            </summary>
        </member>
        <member name="P:DK.Standard.CopyOnWriteDictionary`2.Values">
            <summary>
            Gets the values contained in this dictionary.
            </summary>
        </member>
        <member name="P:DK.Standard.CopyOnWriteDictionary`2.CopyDelay">
            <summary>
            Gets or sets the number of milliseconds to delay copying updates to the internal dictionary. Default is 100ms and a value of 0 disables the copy
            delay feature, causing any updates to the dictionary to immediately trigger a copy operation.
            </summary>
        </member>
        <member name="P:DK.Standard.CopyOnWriteDictionary`2.Count">
            <summary>
            Gets the number of items in this dictionary.
            </summary>
        </member>
        <member name="P:DK.Standard.CopyOnWriteDictionary`2.IsCopyPending">
            <summary>
            Gets a value indicating whether a copy operation is pending due to delayed updates.
            </summary>
        </member>
        <member name="M:DK.Standard.CopyOnWriteDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Performs a lookup for a value with the specified key. This method has a fast lock-free path with identical performance to <see
            cref="T:System.Collections.Generic.Dictionary`2"/> if the key has been copied to the main dictionary and is not waiting in delayed pending updates.
            </summary>
        </member>
        <member name="M:DK.Standard.CopyOnWriteDictionary`2.ContainsKey(`0)">
            <summary>
            Returns whether this dictionary contains a particular key.
            </summary>
        </member>
        <member name="M:DK.Standard.CopyOnWriteDictionary`2.Add(`0,`1,System.Boolean)">
            <summary>
            Adds the key and value to a copy of the internal dictionary under a synchronized lock. This method is mostly intended for initialization or when
            there is no possibility of another thread trying to add the same value.
            </summary>
            <remarks>
            If adding items after initialization then <see cref="!:AddOrGetValue(TKey, Func&lt;TValue&gt;, bool)"/> is the preferred method to use since the value
            factory only runs if the key doesn't exist and there is no risk of competing threads trying to add the same item.
            </remarks>
        </member>
        <member name="M:DK.Standard.CopyOnWriteDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates though the dictionary.
            </summary>
        </member>
        <member name="T:DK.Standard.Crc64">
            <summary>
             CRC64 variant: crc-64-jones 64-bit
             * Poly: 0xad93d23594c935a9
             Changes beyond initial implementation:
             * Starting Value: ulong.MaxValue
             * XOR length in HashFinal()
            </summary>
        </member>
        <member name="M:DK.Standard.Server.GetServerBaseUrl(System.String)">
            Get the base url that should be used for a specified path.
            The path is not included in the returned string, it is only used for determining the base url.
            Example: "https://TENANT.PROJECT.de/"
        </member>
        <member name="M:DK.Standard.Server.GetServerApiUrl(System.String)">
            Get the base url for the generic digitalkraft api.
        </member>
        <member name="M:DK.Standard.Server.GetServerWebSocketUrl(System.String)">
            Get the websocket api url.
        </member>
        <member name="M:DK.Standard.Server.GetHostName(System.String)">
            Get the host name for ping.
        </member>
        <member name="T:DK.Standard.QueryHelpers">
            <summary>
            Provides methods for parsing and manipulating query strings.
            </summary>
        </member>
        <member name="M:DK.Standard.QueryHelpers.AddQueryString(System.String,System.String,System.String)">
            <summary>
            Append the given query key and value to the URI.
            </summary>
            <param name="uri">The base URI.</param>
            <param name="name">The name of the query key.</param>
            <param name="value">The query value.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DK.Standard.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Append the given query keys and values to the URI.
            </summary>
            <param name="uri">The base URI.</param>
            <param name="queryString">A dictionary of query keys and values to append.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DK.Standard.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})">
            <summary>
            Append the given query keys and values to the URI.
            </summary>
            <param name="uri">The base URI.</param>
            <param name="queryString">A collection of query names and values to append.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DK.Standard.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Append the given query keys and values to the URI.
            </summary>
            <param name="uri">The base URI.</param>
            <param name="queryString">A collection of name value query pairs to append.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryString"/> is <c>null</c>.</exception>
        </member>
        <member name="M:DK.Standard.QueryHelpers.ParseQuery(System.String)">
            <summary>
            Parse a query string into its component key and value parts.
            </summary>
            <param name="queryString">The raw query string value, with or without the leading '?'.</param>
            <returns>A collection of parsed keys and values.</returns>
        </member>
        <member name="M:DK.Standard.QueryHelpers.ParseNullableQuery(System.String)">
            <summary>
            Parse a query string into its component key and value parts.
            </summary>
            <param name="queryString">The raw query string value, with or without the leading '?'.</param>
            <returns>A collection of parsed keys and values, null if there are no entries.</returns>
        </member>
        <member name="T:DK.Standard.LineEditor">
            <summary>
            Interactive line editor.
            </summary>
            <remarks>
              <para>
                LineEditor is an interative line editor for .NET applications that provides
                editing capabilities for an input line with common editing capabilities and
                navigation expected in modern application as well as history, incremental
                search over the history, completion (both textual or visual) and various 
                Emacs-like commands.
              </para>
              <para>
                When you create your line editor, you can pass the name of your application, 
                which will be used to load and save the history of commands entered by the user
                for this particular application.    
              </para>
              <para>
                
              </para>
              <example>
                The following example shows how you can instantiate a line editor that
                can provide code completion for some words when the user presses TAB
                and how the user can edit them. 
                <code>
            LineEditor le = new LineEditor ("myshell") { HeuristicsMode = "csharp" };
            le.AutoCompleteEvent += delegate (string line, int point){
                string prefix = "";
                var completions = new string [] { 
                    "One", "Two", "Three", "Four", "Five", 
                     "Six", "Seven", "Eight", "Nine", "Ten" 
                };
                return new Mono.Terminal.LineEditor.Completion(prefix, completions);
            };
            	
            string s;
            	
            while ((s = le.Edit("shell> ", "")) != null)
               Console.WriteLine("You typed: [{0}]", s);			}
                </code>
              </example>
              <para>
                 Users can use the cursor keys to navigate both the text on the current
                 line, or move back and forward through the history of commands that have
                 been entered.   
              </para>
              <para>
                The interactive commands and keybindings are inspired by the GNU bash and
                GNU readline capabilities and follow the same concepts found there.
              </para>
              <para>
                 Copy and pasting works like bash, deleted words or regions are added to 
                 the kill buffer.   Repeated invocations of the same deleting operation will
                 append to the kill buffer (for example, repeatedly deleting words) and to
                 paste the results you would use the Control-y command (yank).
              </para>
              <para>
                 The history search capability is triggered when you press 
                 Control-r to start a reverse interactive-search
                 and start typing the text you are looking for, the edited line will
                 be updated with matches.  Typing control-r again will go to the next
                 match in history and so on.
              </para>
              <list type="table"> 
                <listheader>
                  <term>Shortcut</term>
                  <description>Action performed</description>
                </listheader>
                <item>
                   <term>Left cursor, Control-b</term>
                   <description>
                     Moves the editing point left.
                   </description>
                </item>
                <item>
                   <term>Right cursor, Control-f</term>
                   <description>
                     Moves the editing point right.
                   </description>
                </item>
                <item>
                   <term>Alt-b</term>
                   <description>
                     Moves one word back.
                   </description>
                </item>
                <item>
                   <term>Alt-f</term>
                   <description>
                     Moves one word forward.
                   </description>
                </item>
                <item>
                   <term>Up cursor, Control-p</term>
                   <description>
                     Selects the previous item in the editing history.
                   </description>
                </item>
                <item>
                   <term>Down cursor, Control-n</term>
                   <description>
                     Selects the next item in the editing history.
                   </description>
                </item>
                <item>
                   <term>Home key, Control-a</term>
                   <description>
                     Moves the cursor to the beginning of the line.
                   </description>
                </item>
                <item>
                   <term>End key, Control-e</term>
                   <description>
                     Moves the cursor to the end of the line.
                   </description>
                </item>
                <item>
                   <term>Delete, Control-d</term>
                   <description>
                     Deletes the character in front of the cursor.
                   </description>
                </item>
                <item>
                   <term>Backspace</term>
                   <description>
                     Deletes the character behind the cursor.
                   </description>
                </item>
                <item>
                   <term>Tab</term>
                   <description>
                      Triggers the completion and invokes the AutoCompleteEvent which gets
                      both the line contents and the position where the cursor is.
                   </description>
                </item>
                <item>
                   <term>Control-k</term>
                   <description>
                     Deletes the text until the end of the line and replaces the kill buffer
                     with the deleted text.   You can paste this text in a different place by
                     using Control-y.
                   </description>
                </item>
                <item>
                   <term>Control-l refresh</term>
                   <description>
                      Clears the screen and forces a refresh of the line editor, useful when
                      a background process writes to the console and garbles the contents of
                      the screen.
                   </description>
                </item>
                <item>
                   <term>Control-r</term>
                   <description>
                     Initiates the reverse search in history.
                   </description>
                </item>
                <item>
                   <term>Alt-backspace</term>
                   <description>
                      Deletes the word behind the cursor and adds it to the kill ring.  You 
                      can paste the contents of the kill ring with Control-y.
                   </description>
                </item>
                <item>
                   <term>Alt-d</term>
                   <description>
                      Deletes the word above the cursor and adds it to the kill ring.  You 
                      can paste the contents of the kill ring with Control-y.
                   </description>
                </item>
                <item>
                   <term>Control-y</term>
                   <description>
                      Pastes the content of the kill ring into the current position.
                   </description>
                </item>
                <item>
                   <term>Control-q</term>
                   <description>
                     Quotes the next input character, to prevent the normal processing of
                     key handling to take place.
                   </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="T:DK.Standard.LineEditor.Completion">
            <summary>
            Completion results returned by the completion handler.
            </summary>
            <remarks>
            You create an instance of this class to return the completion
            results for the text at the specific position.   The prefix parameter
            indicates the common prefix in the results, and the results contain the
            results without the prefix.   For example, when completing "ToString" and "ToDate"
            prefix would be "To" and the completions would be "String" and "Date".
            </remarks>
        </member>
        <member name="F:DK.Standard.LineEditor.Completion.Result">
            <summary>
            Array of results, with the stem removed.
            </summary>
        </member>
        <member name="F:DK.Standard.LineEditor.Completion.Prefix">
            <summary>
            Shared prefix for the completion results.
            </summary>
        </member>
        <member name="M:DK.Standard.LineEditor.Completion.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mono.Terminal.LineEditor.Completion"/> class.
            </summary>
            <param name="prefix">Common prefix for all results, an be null.</param>
            <param name="result">Array of possible completions.</param>
        </member>
        <member name="T:DK.Standard.LineEditor.AutoCompleteHandler">
            <summary>
            Method signature for auto completion handlers.
            </summary>
            <remarks>
            The completion handler receives the text as it is being edited as
            well as the position of the cursor in that line.   The method
            must return an instance of Completion with the possible completions.
            </remarks>
        </member>
        <member name="F:DK.Standard.LineEditor.HeuristicsMode">
            <summary>
            The heuristics mode used by code completion.
            </summary>
            <remarks>
               <para>
                 This controls the heuristics style used to show the code
                 completion popup as well as when to accept an entry.
               </para>
               <para>
                 The default value is null which requires the user to explicitly
                 use the TAB key to trigger a completion.    
               </para>
               <para>
                 Another possible value is "csharp" which will trigger auto-completion when a 
                 "." is entered.
               </para>
            </remarks>
        </member>
        <member name="F:DK.Standard.LineEditor.AutoCompleteEvent">
             <summary>
               Invoked when the user requests auto-completion using the tab character
             </summary>
             <remarks>
                The result is null for no values found, an array with a single
                string, in that case the string should be the text to be inserted
                for example if the word at pos is "T", the result for a completion
                of "ToString" should be "oString", not "ToString".
            
                When there are multiple results, the result should be the full
                text
             </remarks>
        </member>
        <member name="M:DK.Standard.LineEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LineEditor, using the specified name for 
            retrieving and storing the history.   The history will default to 10 entries.
            </summary>
            <param name="name">Prefix for storing the editing history.</param>
        </member>
        <member name="M:DK.Standard.LineEditor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the LineEditor, using the specified name for 
            retrieving and storing the history.   
            </summary>
            <param name="name">Prefix for storing the editing history.</param>
            <param name="histsize">Number of entries to store in the history file.</param>
        </member>
        <member name="M:DK.Standard.LineEditor.Edit(System.String,System.String)">
            <summary>
            Edit a line, and provides both a prompt and the initial contents to edit
            </summary>
            <returns>The edit.</returns>
            <param name="prompt">Prompt shown to edit the line.</param>
            <param name="initial">Initial contents, can be null.</param>
        </member>
        <member name="M:DK.Standard.LineEditor.SaveHistory">
            <summary>
            Triggers the history to be written at this point, usually not necessary, history is saved on each line edited.
            </summary>
        </member>
        <member name="P:DK.Standard.LineEditor.TabAtStartCompletes">
            <summary>
            Gets or sets a value indicating whether hitting the TAB key before any text exists triggers completion or inserts a "tab" character into the buffer.  This is useful to allow users to copy/paste code that might contain whitespace at the start and you want to preserve it.
            </summary>
            <value><c>true</c> if tab at start completes; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimal element of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            If more than one element has the minimal projected value, the first
            one encountered will be returned. This overload uses the default comparer
            for the projected type. This operator uses immediate execution, but
            only buffers a single result (the current minimal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimal element of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            If more than one element has the minimal projected value, the first
            one encountered will be returned. This operator uses immediate execution, but
            only buffers a single result (the current minimal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="selector"/>
            or <paramref name="comparer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal element of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned. This overload uses the default comparer
            for the projected type. This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximal element of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned. This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="selector"/>
            or <paramref name="comparer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the default equality comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the specified comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1"/> of the source items using the default equality
            comparer for the type.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
            <remarks>
            This evaluates the input sequence completely.
            </remarks>
        </member>
        <member name="M:DK.MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1"/> of the source items using the specified equality
            comparer for the type.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence</param>
            <param name="comparer">Equality comparer to use; a value of null will cause the type's default equality comparer to be used</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
            <remarks>
            This evaluates the input sequence completely.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="M:RandomExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Returns a random long from min (inclusive) to max (exclusive)
            </summary>
            <param name="random">The given random instance</param>
            <param name="min">The inclusive minimum bound</param>
            <param name="max">The exclusive maximum bound.  Must be greater than min</param>
        </member>
        <member name="M:RandomExtensions.NextLong(System.Random,System.Int64)">
            <summary>
            Returns a random long from 0 (inclusive) to max (exclusive)
            </summary>
            <param name="random">The given random instance</param>
            <param name="max">The exclusive maximum bound.  Must be greater than 0</param>
        </member>
        <member name="M:RandomExtensions.NextLong(System.Random)">
            <summary>
            Returns a random long over all possible values of long (except long.MaxValue, similar to
            random.Next())
            </summary>
            <param name="random">The given random instance</param>
        </member>
        <member name="M:Tasks.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Executes a task with a timeout.
            </summary>
            <returns>
            It will return the result of the task, or it will throw a <c>System.TimeoutException</c> if the timeout is  reached.
            </returns>
            <exception cref="T:System.TimeoutException">Thrown when the timeout is reached.</exception>
        </member>
        <member name="M:Tasks.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Executes a task with a timeout.
            </summary>
            <returns>
            It will return nothing, or it will throw a <c>System.TimeoutException</c> if the timeout is  reached.
            </returns>
            <exception cref="T:System.TimeoutException">Thrown when the timeout is reached.</exception>
        </member>
        <member name="M:Tasks.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Executes a task with a timeout.
            </summary>
            <returns>
            It will return the result of the task, or it will throw a <c>System.TimeoutException</c> if the timeout is  reached.
            </returns>
            <exception cref="T:System.TimeoutException">Thrown when the timeout is reached.</exception>
        </member>
        <member name="M:Tasks.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Executes a task with a timeout.
            </summary>
            <returns>
            It will return nothing, or it will throw a <c>System.TimeoutException</c> if the timeout is  reached.
            </returns>
            <exception cref="T:System.TimeoutException">Thrown when the timeout is reached.</exception>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitPosBits" -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
    </members>
</doc>
