#
# Server-Pool Management (MPM specific)
# 

#
# PidFile: The file in which the server should record its process
# identification number when it starts.
#
# Note that this is the default PidFile for most MPMs.
#
<IfModule !mpm_netware_module>
    PidFile "logs/httpd.pid"
</IfModule>

#
# Only one of the below sections will be relevant on your
# installed httpd.  Use "apachectl -l" to find out the
# active mpm.
#

# Simple MPM
# SimpleProcCount: Number of child processes launched at server startup
# SimpleThreadCount: Set the number of Worker Threads Per-Process
<IfModule mpm_simple_module>
    SimpleProcCount 5
    SimpleThreadCount 5
</IfModule>

# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare
# MaxSpareServers: maximum number of server processes which are kept spare
# MaxClients: maximum number of server processes allowed to start
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule mpm_prefork_module>
    StartServers          5
    MinSpareServers       5
    MaxSpareServers      10
    MaxClients          150
    MaxRequestsPerChild   0
</IfModule>


# tuned by https://www.liquidweb.com/kb/apache-performance-tuning-mpm-directives/
# worker MPM
# Timeout: 60 -  The numerical value of seconds Apache waits for all common I/O events. Apache will abandon requests fail to complete before the provided Timeout value.
# KeepAlive: on - The KeepAlive feature can provide as much as a 50% reductions in latency, significantly boosting the performance of Apache.
# MaxKeepAliveRequests: 100 - Set MaxKeepAliveRequests to double that of the largest count of elements on common pages. (Services like webpagetest.org or gtmetrix.com can count elements on a page).
# KeepAliveTimeout: 2 - A large MaxKeepAliveRequests directive with a very low KeepAliveTimeout allows active visitors to reuse connections while also quickly recovering threads from idle visitors.
# ServerLimit: 4 - ServerLimit represents the upper limit of children Apache is allowed. The practical usage for ServerLimit is creating a hard ceiling in Apache to protect against input errors with MaxRequestWorkers. The cap prevents spawning vastly more children than a system can handle, resulting in downtime, revenue loss, reputation loss or even data loss.
# ThreadLimit: 64 - Used to set the maximum value of ThreadsPerChild. This directive is a hard ceiling for ThreadsPerChild. It 
# StartServers: 4 -  initial number of server processes to start
# MaxClients: 400 - maximum number of simultaneous client connections
# MinSpareThreads: 100- minimum number of worker threads which are kept spare
# MaxSpareThreads:250 -  maximum number of worker threads which are kept spare
# ThreadsPerChild: 50 - constant number of worker threads in each server process. Used to define the limit of threads that each Apache child can manage. Every thread running can handle a single request. The default of 25 works well for most cases and is a fair balance between children and threads.
# MaxRequestsPerChild:2000 - maximum number of requests a server process serves

<IfModule mpm_worker_module>

    KeepAlive on
    KeepAliveTimeout 5
    MaxKeepAliveRequests 100
    TimeOut 60
    StartServers        4
    ServerLimit         4
    MaxRequestWorkers   200
    MaxClients          400
    MinSpareThreads     100
    MaxSpareThreads     250
    ThreadsPerChild     50
    ThreadLimit         64
    MaxRequestsPerChild  2000
    
</IfModule>

# NetWare MPM
# ThreadStackSize: Stack size allocated for each worker thread
# StartThreads: Number of worker threads launched at server startup
# MinSpareThreads: Minimum number of idle threads, to handle request spikes
# MaxSpareThreads: Maximum number of idle threads
# MaxThreads: Maximum number of worker threads alive at the same time
# MaxRequestsPerChild: Maximum  number of requests a thread serves. It is 
#                      recommended that the default value of 0 be set for this
#                      directive on NetWare.  This will allow the thread to 
#                      continue to service requests indefinitely.                          
<IfModule mpm_netware_module>
    ThreadStackSize      65536
    StartThreads           250
    MinSpareThreads         25
    MaxSpareThreads        250
    MaxThreads            1000
    MaxRequestsPerChild      0
    MaxMemFree             100
</IfModule>

# OS/2 MPM
# StartServers: Number of server processes to maintain
# MinSpareThreads: Minimum number of idle threads per process, 
#                  to handle request spikes
# MaxSpareThreads: Maximum number of idle threads per process
# MaxRequestsPerChild: Maximum number of connections per server process
<IfModule mpm_mpmt_os2_module>
    StartServers           2
    MinSpareThreads        5
    MaxSpareThreads       10
    MaxRequestsPerChild    0
</IfModule>

# WinNT MPM
# ThreadsPerChild: constant number of worker threads in the server process
# MaxRequestsPerChild: maximum  number of requests a server process serves
<IfModule mpm_winnt_module>
    ThreadsPerChild      150
    MaxRequestsPerChild    0
</IfModule>

