<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<!--  author - Fred Beckhusen -->
<!--  AGPL3.0  https://opensource.org/licenses/AGPL -->
<!-------- COPYRIGHT 2011 ---------------->
  
<meta name="description" content="Stats for your Opensim  sim" />
<title>Stats for your sim</title>

<!-- liquidscripts.html begins -->

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="x-ua-compatible" content="ie=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1" />
<meta name="author" content="Fred Beckhusen" />
<meta name="copyright" content="Copyright 2012 USA">
<link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-precomposed.png">
<link rel="shortcut icon" type="image/x-ico" href="/favicon.ico" />
<link rel="stylesheet" href="/stats/assets/css/master.css" />
<link rel="stylesheet" media="screen, projection" href="/stats/common/css/liquidscreen.css" type="text/css" />
<link rel="stylesheet" media="print" href="/stats/common/css/liquidprint.css" type="text/css" />

<!-- Jquery -->
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>


<!-- tooltips -->
<link rel="stylesheet" type="text/css" media="all" href="/stats/common/css/tipTip.css" />
<script src="/stats/common/js/jquery.tipTip.js" type="text/javascript"></script>

<!-- liquid layouts -->

<noscript>
<link rel="stylesheet" href="/stats/assets/css/mobile.min.css" />
</noscript>
<script>
// Edit to suit your needs.
var ADAPT_CONFIG = {
  // Where is your CSS?
  path: '/stats/assets/css/',

  // false = Only run once, when page first loads.
  // true = Change on window resize and page tilt.
  dynamic: true,

  // First range entry is the minimum.
  // Last range entry is the maximum.
  // Separate ranges by "to" keyword.
  range: [
    '0px    to 760px  = mobile.min.css',
    '760px  to 980px  = 720.min.css',
    '980px  to 1280px = 960.min.css',
    '1280px to 1600px = 960.min.css',
    '1600px to 1940px = 960.min.css',
    '1940px to 2540px = 960.min.css',
    '2540px           = 960.min.css'
  ]
};
</script>
<script src="/stats/assets/js/adapt.min.js"></script>


<!-- menu -->

<meta name="google-translate-customization" content="a4837fc9f7b10bea-fe17f8309afa4078-g8d3600397694aa00-13"></meta>

<!--  - MENU     -->

<script type="text/javascript">
		
$(document).ready(
		  
	function() {

	/**
	* for each menu element, on mouseenter, 
	* we enlarge the image, and show both sdt_active span and 
	* sdt_wrap span. If the element has a sub menu (sdt_box),
	* then we slide it - if the element is the last one in the menu
	* we slide it to the left, otherwise to the right
	*/
    $('#sdt_menu > li').bind('mouseenter',function(){
		var $elem = $(this);
		$elem.find('img')
			 .stop(true)
			 .animate({
				'width':'170px',
				'height':'170px',
				'left':'0px'
			 },400,'easeOutBack')
			 .andSelf()
			 .find('.sdt_wrap')
		     .stop(true)
			 .animate({'top':'140px'},500,'easeOutBack')
			 .andSelf()
			 .find('.sdt_active')
		     .stop(true)
			 .animate({'height':'170px'},300,function(){
			var $sub_menu = $elem.find('.sdt_box');
			if($sub_menu.length){
				var left = '170px';
				if($elem.parent().children().length == $elem.index()+1)
					left = '-170px';
				$sub_menu.show().animate({'left':left},200);
			}	
		});
	}).bind('mouseleave',function(){
		var $elem = $(this);
		var $sub_menu = $elem.find('.sdt_box');
		if($sub_menu.length)
			$sub_menu.hide().css('left','0px');
		
		$elem.find('.sdt_active')
			 .stop(true)
			 .animate({'height':'0px'},300)
			 .andSelf().find('img')
			 .stop(true)
			 .animate({
				'width':'0px',
				'height':'0px',
				'left':'85px'},400)
			 .andSelf()
			 .find('.sdt_wrap')
			 .stop(true)
			 .animate({'top':'25px'},500);
	});
		



});

</script>
<![endif]-->


<!--<script type="text/javascript" src="/stats/js/interface.js"></script>-->
<link rel="stylesheet" href="/stats/easing/css/style.css" type="text/css" media="screen" />

<style>
span.reference {
	position: fixed;
	left: 10px;
	bottom: 10px;
	font-size: 12px;
}
span.reference a {
	color: #aaa;
	text-transform: uppercase;
	text-decoration: none;
	text-shadow: 1px 1px 1px #000;
	margin-right: 30px;
}
span.reference a:hover {
	color: #ddd;
}
ul.sdt_menu {
	margin-top: 10px;
    
}

#coolmenu {
  background-color: #222222;
  height: 90px;
  margin-left: auto;
  margin-right: auto;
  width:940px;
}

#spaceline {
  height: 80px;
}
</style>

        
<!-- /scripts.html -->



<!------------------------------------------->



<style>

#container {
	width: 900px;
	margin: 0 auto;
}
#stats{
	width: 900px;
	margin: 0 auto;
}
#people li {
	margin-left: 20px;
}
</style>

<script type="text/javascript" src="/stats/highcharts/js/highcharts.js"></script>
<script type="text/javascript" src="/stats/jqueryui/js/jquery-ui-1.8.22.custom.min.js"></script>
<link type="text/css" href="/stats/jqueryui/css/ui-lightness/jquery-ui-1.8.22.custom.css" rel="Stylesheet" />	
<link type="text/css" href="/stats/timepicker/jquery.ui.timepicker.css" rel="Stylesheet" />	
<script type="text/javascript" src="/stats/timepicker/jquery.ui.timepicker.js"></script>
<script src="/stats/flexgrid/js/flexigrid.js"></script>

<link rel="stylesheet" type="text/css" media="all" href="/stats/flexgrid/css/flexigrid.css" />


<script type="text/javascript">

function gup( name ){
	name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
	 var regexS = "[\\?&]"+name+"=([^&#]*)";
	var regex = new RegExp( regexS );
	var results = regex.exec( window.location.href );
	if( results == null )
		return "";
	else
		return results[1];
}

	var type;
	var edata = {};
	var chart;
	var chart2;
	var chart3;
	var title;
	var person;
    var GridName;
	$(document).ready(function() { 
       
        
		$( "#datepicker1").datepicker();
		$( "#datepicker2").datepicker();
		
		$( "#timepicker1").timepicker({
				showPeriodLabels: false,
		});
		
		$( "#timepicker2").timepicker({
				showPeriodLabels: false,
		});
		
        
        var what = gup("GridName") ;
		
		if (what.length > 0)
		{
			GridName = what;
		}
        
		what = gup("Type") ;
		
		if (what.length > 0)
		{
			type = what;
		}
		else
		{
			type = 'Objects';
		}
		
		what = gup("q") ;
		if (what.length > 0)
		{
			sim = what;
		}
		else
		{
			sim = 'Welcome';
		}
		
		var start;
		what = gup("Start") ;
		if (what.length > 0)     {
			start = what;
		}	else {
			start = '';
		}
		
			
		var end;
		what = gup("End") ;
		if (what.length > 0)  {
			end = what;
		}	else	{
			end = '';
		}
		

		
		what = gup("person") ;
		if (what.length > 0)  {
			person = what;
		}	else	{
			person = '';
		}
		
		var Password;
		what = gup("Password") ;
		if (what.length > 0)     {
			Password = what;
		}	else {
			Password = '';
		}
      
        var WebKey;
		what = gup("WebKey") ;
		if (what.length > 0)     {
			WebKey = what;
            if (WebKey == 'All')
            {
              window.location.href = "/stats/listmaps.plx";
            }
            
		}	else {
			WebKey = '';
		}
        
        
		$('#submit').click(function() {
			if ($( "#datepicker1").val()) {
				start = $( "#datepicker1").val();
			}
			
			if ($( "#datepicker2").val()) {
				end  = $( "#datepicker2").val();
			}
			
			var simname = $( "#mySelect").val();
		  
			
            var url = '/stats/default.htm?q=' + simname + '&GridName=' + GridName + '&Start=' + escape(start) + '&End=' + escape(end)  + '&WebKey=' + WebKey ;
			window.location = url;
		});

            $.get('/stats/simvisit.plx?q=' + escape(sim) + '&GridName=' + GridName + '&Start=' + escape(start) + '&End=' + escape(end) + '&person=' + person + '&WebKey=' + WebKey ,null, function (tsv,stat,xhr) {
			
            $( "#status").append(tsv.text);
            
			$( "#datepicker1").val(tsv.s);
			$( "#datepicker2").val(tsv.e);
			
			$( "#datepicker1").datepicker();
			$( "#datepicker2").datepicker();

			
			$("#mySelect").val(tsv.sim);
			
			allVisits = [];
			var html = '<table>';
			html += '<tr><th>Name</th><th>Time Spent</th></tr>';
			title = tsv.title;
            var xsize = tsv.xsize;
            var ysize = tsv.ysize;
            
            //alert (xsize);
            
			
			jQuery.each(tsv.data, function(name, line) {
				
				var point = {};
				
				var red = Math.floor(Math.random() * 128 + 128);
				var green = Math.floor(Math.random() * 128 + 128);
				var blue = Math.floor(Math.random() * 128 + 128);
				var color = 'rgba(' + red + ',' + green + ',' + blue + ', 1.0)';
					
				point.color = color;
				point.data = [];
				
				var aname = line.name;
				var apoint = line.vectors;
				var visit = line.visits;
				
				jQuery.each(apoint, function(i, line) {	
					var y = line.X;
					var x = line.Y;
					var z = line.Z;
                    
                    point.name = aname + ' (' + visit + ' min) &lt;' + x + ',' + y + ',' + z + '&gt;';
                    
                    //x = x * 255/xsize;
                    //y = y * 255/ysize;
                    
					point.data.push([x,y]);
				});
				allVisits.push (point);
				
				html += '<tr>'
				html += '<td><a href="/stats/?person=' + aname + '&q=' + sim + '&GridName=' + GridName + '&Start=' +  tsv.s + '&End=' + tsv.e  + '&WebKey=' + WebKey  + '">' + aname + '</a></td>';
				html += '<td>' + visit + '</td>';
				html += '</tr>';
			});
			
			html += '</table>';
			$('#people').append(html);
			
			$("#people").flexigrid({
				width: 900,
				height: 500
			});
		


            var options = {
                        chart: {
                            renderTo: 'container1',
                            marginLeft: 50,
                            defaultSeriesType: 'scatter',
                            zoomType: 'xy',
                            height: 900,
                            width: 900,
                            events: {
                                load: function() {
                                   this.renderer.image('/stats/simmap.plx?Sim=' + sim + '&GridName=' + GridName, 50, 55, 840, 790).add();
                                }
                            }
                        },
                        //series: {
                        //	lineWidth: 1,
                        //	dashStyle : 'Solid',
                        //	connectNulls : true
                        //},
                        legend: {
                            enabled : false
                        },
                        title: {
                            text: ''
                        },
                        subtitle: {
                            text: ''
                        },
                        xAxis: {
                            gridLineColor: '#eeeeee',
                            gridLineWidth: 0,
                            max: xsize,
                            min: 0,
                            title: {
                                enabled: true,
                                text: 'X (0-' + xsize + ')'
                            },
                            startOnTick: false,
                            endOnTick: false,
                            showLastLabel: true,
                            plotLines: [{
                                value: 0,
                                width: 1,
                                color: '#808080'
                            }]
                        },
                        yAxis: {
                            gridLineColor: '#eeeeee',
                            gridLineWidth: 0,
                            max: ysize,
                            min: 0,
                            title: {
                                enabled: true,
                                text: 'Y (0-' + ysize + ')'
                            },
                            startOnTick: false,
                            endOnTick: false,
                            showLastLabel: true
                        },
                        tooltip: {
                            formatter: function() {
                                    return '<b>' + this.series.name + '</b>'
                                    
                            }
                        },
                        Options: {
                            scatter: {
                                marker: {
                                    radius: 5,
                                    states: {
                                        hover: {
                                            enabled: true,
                                            lineColor: 'rgb(255,255,255)'
                                        }
                                    }
                                },
                                states: {
                                    hover: {
                                        marker: {
                                            enabled: false
                                        }
                                    }
                                }
                            }
                        },
                    };
                    
                    var options2 = {
                        chart: {
                           renderTo: 'stats',
                           type: 'column',
                           height: 250,
                            width: 900
                       },
                       title: {
                            text: 'Time in Sim'
                        },
                        subtitle: {
                            text: ''
                        },
                        xAxis: {
                            categories: [
                                
                            ]
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Total time in Minutes'
                            }
                        },
                        legend: {
                            layout: 'vertical',
                            backgroundColor: '#FFFFFF',
                            align: 'left',
                            verticalAlign: 'top',
                            x: 100,
                            y: 70,
                            floating: true,
                            shadow: true
                        },
                        tooltip: {
                            formatter: function() {
                                return ''+
                                    this.x +': '+ this.y ;
                            }
                        },
                        plotOptions: {
                            column: {
                                pointPadding: 0.2,
                                borderWidth: 0
                            }
                        },
                        series: []
                        
                    };
                    
                    var options3 = {
                        chart: {
                           renderTo: 'daily',
                           type: 'column',
                           height: 250,
                            width: 900
                       },
                       title: {
                            text: 'Visitors by Day'
                        },
                        subtitle: {
                            text: ''
                        },
                        xAxis: {
                            categories: []
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Visitors by Day'
                            }
                        },
                        legend: {
                            layout: 'vertical',
                            backgroundColor: '#FFFFFF',
                            align: 'left',
                            verticalAlign: 'top',
                            x: 100,
                            y: 70,
                            floating: true,
                            shadow: true
                        },
                        tooltip: {
                            formatter: function() {
                                return ''+
                                    this.x +': '+ this.y ;
                            }
                        },
                        plotOptions: {
                            column: {
                                pointPadding: 0.2,
                                borderWidth: 0
                            }
                        },
                        series: []
                        
              };




			// visits by time
			options.title.text = unescape(tsv.sim) + ' ' + title;
			options.subtitle.text = 'Visitors: ' + tsv.visits + ',  Time spent: ' + tsv.time + ' minutes' + ' From: ' +  tsv.start + ' To: ' + tsv.end ;
			
			options.series = allVisits;
			
			console.log(options)
			
			chart = new Highcharts.Chart(options);
		
			var points = {
						name: 'Time in Sim',
						data: []
					};
			
			
			jQuery.each(tsv.timespent, function(i, line) {
					var Xname = line.date;
					var value = line.count;
					points.data.push(value);
					
					options2.xAxis.categories.push (Xname);
				
			});
				
			options2.series.push(points);
			options2.subtitle.text = 'Visitors: ' + tsv.visits + ',  Time spent: ' + tsv.time + ' minutes' + ' From: ' +  tsv.start + ' To: ' + tsv.end;
			chart2 = new Highcharts.Chart(options2);
			
			// chart 3 - daily visits
			points = {
						name: 'Unique Visitors',
						data: []
					};
			
			jQuery.each(tsv.daily, function(i, line) {
					var Xname = line.date;
					var value = line.count;
					points.data.push(value);
					
					options3.xAxis.categories.push (Xname);
			});
			
			options3.series.push(points);
			options3.subtitle.text = 'Visitors: ' + tsv.visits + ',  Time spent: ' + tsv.time + ' minutes' + ' From: ' +  tsv.start + ' To: ' + tsv.end;
			chart3 = new Highcharts.Chart(options3);
		});
		
		
	});

	
</script>


</head>

<body>


<div id="status" style="width:900px;margin-left: auto;margin-right: auto"></div>
<form action="/stats/default.htm">

<div class="grid_1">
	
</div>
<div class="grid_3">
	Start Date: <br><input id="datepicker1" name="Start" type="text" value="">
	<!--Start Time: <br><input id="timepicker1" name="StartTime" type="text" >-->
</div>
<div class="grid_3">
	End Date: <br><input id="datepicker2" type="text" name="End" value="">
	<!--End Time: <br><input id="timepicker2" type="text" name="EndTime">-->
</div>


</form>



<div class="grid12">
<div class="spacer"></div>
<br clear="all">

<div id="container" style="height:900px; width:900px; margin-left: auto;margin-right: auto">
	<div id="container1"  style="height:900px; width:900px; margin-left: auto;margin-right: auto">
		<div class="spacer"></div>
		<br clear="all">
		<img style="display: block;margin-left: auto;margin-right: auto" src="/images/spinner.gif" width="100">
	</div>
</div>

<div id="daily"></div>
<div id="stats"></div>
<div id="people"></div>
	
		
</body>

</html>